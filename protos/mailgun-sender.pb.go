// Code generated by protoc-gen-go.
// source: mailgun-sender.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	mailgun-sender.proto

It has these top-level messages:
	SendRequest
	SendResponse
	StatusRequest
	StatusResponse
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type SendRequest struct {
	Email   string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *SendRequest) Reset()                    { *m = SendRequest{} }
func (m *SendRequest) String() string            { return proto.CompactTextString(m) }
func (*SendRequest) ProtoMessage()               {}
func (*SendRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SendResponse struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *SendResponse) Reset()                    { *m = SendResponse{} }
func (m *SendResponse) String() string            { return proto.CompactTextString(m) }
func (*SendResponse) ProtoMessage()               {}
func (*SendResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type StatusRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type StatusResponse struct {
	Status string `protobuf:"bytes,1,opt,name=Status,json=status" json:"Status,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*SendRequest)(nil), "protos.SendRequest")
	proto.RegisterType((*SendResponse)(nil), "protos.SendResponse")
	proto.RegisterType((*StatusRequest)(nil), "protos.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "protos.StatusResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for Sender service

type SenderClient interface {
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type senderClient struct {
	cc *grpc.ClientConn
}

func NewSenderClient(cc *grpc.ClientConn) SenderClient {
	return &senderClient{cc}
}

func (c *senderClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := grpc.Invoke(ctx, "/protos.Sender/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *senderClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/protos.Sender/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sender service

type SenderServer interface {
	Send(context.Context, *SendRequest) (*SendResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
}

func RegisterSenderServer(s *grpc.Server, srv SenderServer) {
	s.RegisterService(&_Sender_serviceDesc, srv)
}

func _Sender_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SenderServer).Send(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Sender_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SenderServer).Status(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Sender_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Sender",
	HandlerType: (*SenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Sender_Send_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Sender_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0xc9, 0x4d, 0xcc, 0xcc,
	0x49, 0x2f, 0xcd, 0xd3, 0x2d, 0x4e, 0xcd, 0x4b, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x03, 0x53, 0xc5, 0x4a, 0xb6, 0x5c, 0xdc, 0xc1, 0x40, 0xf1, 0xa0, 0xd4, 0xc2, 0xd2,
	0xd4, 0xe2, 0x12, 0x21, 0x11, 0x2e, 0xd6, 0x54, 0x90, 0x7a, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce,
	0x20, 0x08, 0x47, 0x48, 0x82, 0x8b, 0x3d, 0x37, 0xb5, 0xb8, 0x38, 0x31, 0x3d, 0x55, 0x82, 0x09,
	0x2c, 0x0e, 0xe3, 0x2a, 0xc9, 0x71, 0xf1, 0x40, 0xb4, 0x17, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a,
	0xf1, 0x71, 0x31, 0x65, 0xa6, 0x80, 0x35, 0x33, 0x07, 0x01, 0x59, 0x4a, 0xf2, 0x5c, 0xbc, 0xc1,
	0x25, 0x89, 0x25, 0xa5, 0xc5, 0x30, 0x0b, 0xd0, 0x15, 0x68, 0x70, 0xf1, 0xc1, 0x14, 0x40, 0x8d,
	0x10, 0xe3, 0x62, 0x83, 0x88, 0x40, 0xdd, 0xc0, 0x56, 0x0c, 0xe6, 0x19, 0x55, 0x00, 0xc5, 0xc1,
	0x3e, 0x10, 0x32, 0xe6, 0x62, 0x01, 0xb1, 0x84, 0x84, 0x21, 0x7e, 0x29, 0xd6, 0x43, 0xf2, 0x81,
	0x94, 0x08, 0xaa, 0x20, 0xc4, 0x50, 0x25, 0x06, 0x21, 0x4b, 0x98, 0xb1, 0x42, 0xa2, 0x70, 0x15,
	0xc8, 0x2e, 0x93, 0x12, 0x43, 0x17, 0x86, 0x69, 0x4d, 0x82, 0x84, 0x95, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0xa3, 0xb2, 0xab, 0x53, 0x4a, 0x01, 0x00, 0x00,
}
